name: Build and Release

# 触发条件：推送标签时自动构建和发布
on:
  push:
    tags:
      - 'v*.*.*'  # 匹配 v1.0.0, v2.1.3 等版本标签
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: mac
            artifact: '*.dmg'
          - os: windows-latest
            platform: win
            artifact: '*.exe'
          - os: ubuntu-latest
            platform: linux
            artifact: '*.AppImage'
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # 清理并安装依赖
      - name: Clean install dependencies
        shell: bash
        run: |
          if [ -d "node_modules" ]; then rm -rf node_modules; fi
          if [ -f "package-lock.json" ]; then rm -f package-lock.json; fi
          npm install --no-audit --no-fund
      
      # TypeScript 类型检查
      - name: Type check
        run: npm run typecheck
      
      # 构建应用
      - name: Build application
        run: npm run build
      
      # 打包应用 (macOS)
      - name: Package app (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          npm run pack
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false  # 禁用代码签名
      
      # 打包应用 (Windows)
      - name: Package app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm run pack
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false  # 禁用代码签名
      
      # 打包应用 (Linux)
      - name: Package app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          npm run pack
      
      # 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: claude-code-cue-${{ matrix.platform }}
          path: |
            release/${{ matrix.artifact }}
            release/*.yml
            release/*.yaml
          retention-days: 30
  
  # 创建 GitHub Release
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      # 创建 Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Claude Code Cue ${{ github.ref_name }}
          body: |
            ## 🎉 Claude Code Cue ${{ github.ref_name }}
            
            ### 📦 下载链接
            
            - **macOS**: 下载 `.dmg` 文件
            - **Windows**: 下载 `.exe` 文件  
            - **Linux**: 下载 `.AppImage` 文件
            
            ### ✨ 主要功能
            
            - 🎵 为 Claude Code 添加音效反馈
            - 🔧 图形化配置界面
            - 🎯 智能工具音效映射
            - 🌍 跨平台支持 (macOS, Windows, Linux)
            - 🎨 现代化 UI 设计
            
            ### 📋 使用说明
            
            1. 下载对应平台的安装包
            2. 安装并运行 Claude Code Cue
            3. 配置音效设置
            4. 点击"应用配置"生成 Hook 脚本
            5. 在 Claude Code 中享受音效体验
            
            ---
            
            **完整更新日志**: [查看提交历史](https://github.com/${{ github.repository }}/commits/${{ github.ref_name }})
          draft: false
          prerelease: false
          files: |
            ./artifacts/claude-code-cue-mac/*.dmg
            ./artifacts/claude-code-cue-win/*.exe
            ./artifacts/claude-code-cue-linux/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}